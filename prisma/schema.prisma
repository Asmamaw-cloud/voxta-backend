generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  avatarUrl        String?
  status           String            @default("offline")
  role             Role              @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  AiConversation   AiConversation[]
  callParticipants CallParticipant[]
  chats            ChatMember[]
  messages         Message[]
  notifications    Notification[]
  pollVotes        PollVote[]
  reactions        Reaction[]
  assignedTasks    Task[]            @relation("UserAssignedTasks")
  tasks            Task[]            @relation("UserCreatedTasks")
}

model Chat {
  id        String       @id @default(uuid())
  name      String?
  type      ChatType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  calls     Call[]
  members   ChatMember[]
  messages  Message[]
  polls     Poll[]
}

model ChatMember {
  id       String   @id @default(uuid())
  chatId   String
  userId   String
  role     ChatRole @default(MEMBER)
  joinedAt DateTime @default(now())
  chat     Chat     @relation(fields: [chatId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}

model Message {
  id          String      @id @default(uuid())
  chatId      String
  senderId    String
  content     String?
  type        MessageType @default(TEXT)
  attachments String[]
  parentId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  chat        Chat        @relation(fields: [chatId], references: [id])
  parent      Message?    @relation("MessageReplies", fields: [parentId], references: [id])
  replies     Message[]   @relation("MessageReplies")
  sender      User        @relation(fields: [senderId], references: [id])
  reactions   Reaction[]
  tasks       Task[]
}

model Reaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  type      String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Call {
  id           String            @id @default(uuid())
  chatId       String
  type         CallType
  startedAt    DateTime          @default(now())
  endedAt      DateTime?
  status       CallStatus        @default(PENDING)
  chat         Chat              @relation(fields: [chatId], references: [id])
  participants CallParticipant[]
}

model CallParticipant {
  id       String    @id @default(uuid())
  callId   String
  userId   String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  call     Call      @relation(fields: [callId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  deleted   Boolean          @default(false)
  link      String?
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId, read])
}

model Task {
  id           String     @id @default(uuid())
  title        String
  description  String?
  creatorId    String
  assignedToId String?
  status       TaskStatus @default(PENDING)
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  messageId    String?
  assignedTo   User?      @relation("UserAssignedTasks", fields: [assignedToId], references: [id])
  creator      User       @relation("UserCreatedTasks", fields: [creatorId], references: [id])
  message      Message?   @relation(fields: [messageId], references: [id])
}

model Poll {
  id        String     @id @default(uuid())
  chatId    String
  question  String
  options   String[]
  createdAt DateTime   @default(now())
  endsAt    DateTime?
  chat      Chat       @relation(fields: [chatId], references: [id])
  votes     PollVote[]
}

model PollVote {
  id        String   @id @default(uuid())
  pollId    String
  userId    String
  option    String
  createdAt DateTime @default(now())
  poll      Poll     @relation(fields: [pollId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([pollId, userId])
}

model AiConversation {
  id        String      @id @default(uuid())
  userId    String
  title     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  messages  AiMessage[]
}

model AiMessage {
  id             String         @id @default(uuid())
  conversationId String
  sender         AiSender
  content        String
  createdAt      DateTime       @default(now())
  conversation   AiConversation @relation(fields: [conversationId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum ChatType {
  PRIVATE
  GROUP
  CHANNEL
}

enum ChatRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  VOICE
}

enum CallType {
  AUDIO
  VIDEO
}

enum CallStatus {
  PENDING
  ONGOING
  ENDED
  MISSED
}

enum NotificationType {
  MESSAGE
  CALL
  TASK
  POLL
  SYSTEM
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum AiSender {
  USER
  AI
}
